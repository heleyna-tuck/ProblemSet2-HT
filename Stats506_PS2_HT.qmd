---
title: "Stats506_PS2"
author: "Heleyna Tucker"
format:
  html:
    embed-resources: true
editor: visual
---

# Problem 1 - Dice Game

Let's play a dice game. It costs \$2 to play. You roll a single 6-sided die.

-   On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins \$4).

-   On a roll of 1, 3, or 5, you lose

We're going to implement this in different ways. Each function takes in as input the number of dice to roll, and each function returns your total winnings or loses. E.g.

play_dice(10) -\> \[1\] 4

play_dice(10) -\> \[1\] -6

## Part A:

i\) Version 1: Implement this game using a loop over the dice rolls.

```{r}
#' Function to play dice game
#'
#' @param rolls is a numberic entry for the number of rolls the user specifies
#'
#' @return total value according to dice role rules (even number rolled, add to total, odd number rolled, do not win anything.)
#' @export
#'
#' @examples
play_dice1 <- function(rolls, sample_rolls = sample(1:6, rolls, replace = TRUE)) {
  total <- -2*rolls
  total_rolls <- sample_rolls
  for (i in 1:rolls){
    if (total_rolls[i] %% 2 == 1){
      total = total
    }
    else{
      total = total + total_rolls[i]
    }
  }
  return(total)
}
```

\*ii) Version 2: Implement this game using built-in R vectorized functions.

*How do I do this?* Not sure what it's asking me to do

```{r}
#' Function to play dice game using vectorized functions
#'
#' @param rolls is a numeric entry for the number of rolls the user specifies
#'
#' @return total amount of money the player has when the game is played (even number rolled, add to amount of money. Odd number rolled, don't win anything. It takes 2 dollars to play so subtract that from total as well.)
#' @export
#'
#' @examples
play_dice2 <- function(rolls, sample_rolls = sample(1:6, rolls, replace = TRUE)){
  total_rolls <- sample_rolls
  for(i in (1:rolls)){
      if(total_rolls[i] %in% c(1,3,5)){
        total_rolls[i] = 0
  }
  }
  total <- (sum(total_rolls) - (2*rolls))
  return(total)
}
```

Above is the game implemented with built-in R vectorized function sum()

iii\) Version 3: Implement this by collapsing the die rolls into a single table(). (Hint: Be careful indexing the table - what happens if you make a table of 5 dice rolls? You may need to look to other resources for how to solve this.)

```{r}
#' Function to play dice game using tables
#'
#' @param rolls is a numeric entry for the number of rolls the user specifies
#'
#' @return total amount of money after playing (rules above)
#' @export
#'
#' @examples
play_dice3 <- function(rolls, sample_rolls = sample(1:6, rolls, replace = TRUE)){
  total_rolls <- c(sample_rolls)
  total_rolls <- factor(total_rolls, levels = c(1:6))
  total_rolls <- table(total_rolls)
  total <- -2*(rolls)
  for (i in 1:6){
      if((total_rolls[i]) != 0 & i %% 2 == 1){
        total = total 
      }
      if ((total_rolls[i]) != 0 & i %% 2 == 0){
        total = total + (i*total_rolls[i])
      }
  }
  return(as.numeric(total))
        
}
```

Above is the same dice game using tables. I use the same rules as indicated above to choose how I alter the total for the function to return.

iv\) Version 4: Implement this game by using one the "apply" functions.

```{r}
#' Dice Game using sapply function to implement the game.
#'
#' @param rolls is a numeric entry for the number of rolls the user specifies
#'
#' @return total amount the user has won or lost in dice game(rules specified above)
#' @export
#'
#' @examples
play_dice4 <- function(rolls, sample_rolls = sample(1:6, rolls, replace = TRUE)){
  dice_rolls <- list(sample_rolls)
  total_rolls <- sapply(dice_rolls, function(x){
    for (i in 1:rolls){
      if(x[i] %in% c(1,3,5)){
        x[i] = 0
      }
    }
    return(x)
  }
    )
  total <- (sum((total_rolls[,1])) - (2*rolls))
  return(total)
}
```

### Part B: Demonstrate that all versions work. Do so by running each a few times, once with an input of 3, and once with an input of 3000.

Below is the output when running the play_dice1() function:

```{r}
play_dice1(3)
play_dice1(3000)
```

Below is the output when running the play_dice2() function:

```{r}
play_dice2(3)
play_dice2(3000)
```

Below is the output when running the play_dice3() function:

```{r}
play_dice3(3)
play_dice3(3000)
```

Below is the output when running the play_dice4() function:

```{r}
play_dice4(3)
play_dice4(3000)
```

### Part C: Demonstrate that the four versions give the same result. Test with inputs 3 and 3000. (You may need to add a way to control the randomization)

Now I will demonstrate that the four versions give the same result. I will control the randomization by defining the rolls before sending them to their respective functions.

```{r}
dice_roll_3 <- sample(1:6, 3, replace = TRUE)
dice_roll_3000 <- sample(1:6, 3000, replace = TRUE)

play_dice1(3, sample_rolls = dice_roll_3)
play_dice1(3000, sample_rolls = dice_roll_3000)

play_dice2(3, sample_rolls = dice_roll_3)
play_dice2(3000, sample_rolls = dice_roll_3000)

play_dice3(3, sample_rolls = dice_roll_3)
play_dice3(3000, sample_rolls = dice_roll_3000)

play_dice4(3, sample_rolls = dice_roll_3)
play_dice4(3000, sample_rolls = dice_roll_3000)
```

### Part D: Use the *microbenchmark* package to clearly demonstrate the speed of the implementations. Compare performance with a low input (100) and a large input (10000). Discuss the results.

```{r}
library(microbenchmark)
```

```{r}
microbenchmark(play_dice1(100), play_dice2(100), play_dice3(100), play_dice4(100))
```

With a low input, it seems that the play_dice1() function is performing the fastest, while play_dice3() is performing the slowest.

Now I will try with a higher input:

```{r}
microbenchmark(play_dice1(10000), play_dice2(10000), play_dice3(10000), play_dice4(10000))
```

Above, it looks like with a higher input, the play_dice3() function runs the fastest on average, while the play_dice2() and play_dice4() run fairly slower on average.

### \*Part E: Do you think this is a fair game? Defend your decision with evidence based upon a Monte Carlo simulation.

```{r}
outputs <- c()
for (i in 1:1000){
  outputs[i] <- play_dice1(100)
}
hist(rnorm(1000, mean = mean(outputs), sd = sd(outputs)))
```

As we can see from the histogram above, the simulation seems to be centered around zero. Meaning, we win about as much as we lose. Therefore, the game is fair.

# Problem 2 - Linear Regression

Download the cars data set. The goal is to examine the relationship between horsepower and highway gas mileage.

Download cars data set using ready_csv():

```{r}
library(tidyverse)
```

```{r}
cars <- read_csv('/Users/19892/OneDrive/Documents/STATS506/ProblemSets/ProblemSet2-HT2.0/cars.csv')
```

```{r}
cars[1:10,]
```

Above we can see that the names of the variables are very long.

### Part A: Rename the columns of the data to more reasonable lengths

```{r}
col_names <- c('Height', 'Length', 'Width', 'Driveline', 'EngineType', 'Hybrid', 'NumForwardGears', 'Transmission', 'CityMPG', 'FuelType', 'HighwayMPG', 'Classification', 'ID', 'Make', 'ModelYear', 'Year', 'HP', 'Torque')
colnames(cars) = col_names
cars[1:10,]
```

Above is the cars data frame renamed using the column names I specified in the col_names variable.

### Part B: Restrict the data whose Fuel Type is "Gasoline"

I will do this using the which() function below:

```{r}
cars_gasoline <- cars[which(cars$FuelType == "Gasoline"),]
cars_gasoline[1:10,]
```

Now we have data frame cars_gasoline which restricts the data to cars whose Fuel Type is "Gasoline".

### Part C: Fit a linear regression model predicting MPG on the highway. The predictor of interest is horsepower. Control for:

-   The torque of the engine

-   All three dimensions of the car

-   The year the measurement was made, as a categorical variable. (Not the year the car was manufactured).

Briefly discuss the estimated relationship between horsepower and highway MPG. Be precise about the interpretation of the estimated coefficient.

Here is he linear model predicting MPG on the highway with horsepower:

```{r}
lmod <- lm(HighwayMPG ~ HP + Torque + Height + Length + Width + as.factor(Year), data = cars_gasoline)
summary(lmod)
```

Above we can see that the relationship between horsepower and highway MPG is that with a one unit increase in horsepower, highway MPG increases by about 0.016. This is significant given the p-value in the summary above is below 0.05.

### Part D: Interaction and Plot

It seems reasonable that there may be an interaction between horsepower and torque. Refit the model (with lm) and generate an interaction plot, showing how the relationship between horsepower and MPG changes as torque changes. Choose reasonable values of horsepower, and show lines for three different reasonable values of torque.

```{r}
library(interactions)
```

```{r}
mod2 <- lm(HighwayMPG ~  HP*Torque + Height + Length + Width + as.factor(Year), data = cars_gasoline)
summary(mod2)
interact_plot(mod2, pred = HP, at = list(Year = 2010), modx = Torque)
```

In the above interaction plot, we can observe that when torque is higher, the relationship between HP and HighwayMPG is a stronger positive relationship than when torque is lower (dotted lighter blue line). When torque is lower (one SD below the mean), this is almost no relationship between HP and HighwayMPG,

### Part E: Esimation

Calculate B-Hat manually (without using lm) by first creating a proper design matrix, then using matrix algebra to estimate B. Confirm that you get the same result as lm did prior.

(not doing this right)

```{r}
library(matlib)
```

```{r}
design_matrix <- model.matrix(mod2, data = cars_gasoline)
Y <- matrix(cars_gasoline$HighwayMPG, nrow = 4591, ncol = 1)
estimation <- solve(t(design_matrix) %*% design_matrix) %*% t(design_matrix) %*% Y
print(estimation)
```

# Problem 3 (Stata)

### Part A: Rename the variables along the columns to more reasonable lengths:

```         
stata

. rename (dimensionsheight dimensionslength dimensionswidth engineinformationdri
> veline engineinformationenginetype engineinformationhybrid engineinformationnu
> mberofforward engineinformationtransmission fuelinformationcitympg fuelinforma
> tionfueltype fuelinformationhighwaympg identificationclassification identifica
> tionid identificationmake identificationmodelyear identificationyear engineinf
> ormationenginestatistic v18) (height length width DriveLine EngineType hybrid 
> NumForwardGears transmission cityMPG FuelType highwayMPG classification ID mak
> e ModelYear year hp torque)

. ds
height        EngineType    cityMPG       ID            hp
length        hybrid        FuelType      make          torque
width         NumForward~s  highwayMPG    ModelYear
DriveLine     transmission  classifica~n  year
```

### Part B: Restrict the data to cars whose Fuel Type is "Gasoline":

```         
stata

. keep if FuelType == "Gasoline"
(485 observations deleted)
```

### Part C: Fit a linear regression model predicting MPG on the highway. The predictor of interest is horsepower control for:

-   The torque of the engine

-   All three dimensions of the car

-   The year the car was released, as a categorical variable

```         
stata

. local myvars hp torque height length width i.year

. regress highwayMPG `myvars'

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(8, 4582)      =    413.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024

------------------------------------------------------------------------------
  highwayMPG | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
          hp |   .0163556   .0022772     7.18   0.000     .0118913      .02082
      torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236
      height |   .0099079   .0011267     8.79   0.000      .007699    .0121168
      length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613
       width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388
             |
        year |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093
------------------------------------------------------------------------------
```

As we can see above, the output is similar to that of problem 2. The coefficient of hp is telling us as hp goes up by 1 unit, it increases highwaympg by 0.163556.

### Part D: Adding an interaction between hp and torque and interaction plot:

```         
stata

. regress highwayMPG c.hp##c.torque height length width i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(9, 4581)      =    480.07
       Model |  81105.8715         9  9011.76351   Prob > F        =    0.0000
    Residual |   85993.096     4,581  18.7716865   R-squared       =    0.4854
-------------+----------------------------------   Adj R-squared   =    0.4844
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.3326

-------------------------------------------------------------------------------
   highwayMPG | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
           hp |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686
       torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928
              |
c.hp#c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214
              |
       height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573
       length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075
        width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011
              |
         year |
        2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777
        2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626
        2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915
              |
        _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266
-------------------------------------------------------------------------------
```

```         
stata


. margins, at(torque = (25 50 75 100 125)) at(hp = (50 100 150 200 250))

Predictive margins                                       Number of obs = 4,591
Model VCE: OLS

Expression: Linear prediction, predict()
1._at:  torque =  25
2._at:  torque =  50
3._at:  torque =  75
4._at:  torque = 100
5._at:  torque = 125
6._at:  hp     =  50
7._at:  hp     = 100
8._at:  hp     = 150
9._at:  hp     = 200
10._at: hp     = 250

------------------------------------------------------------------------------
             |            Delta-method
             |     Margin   std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
         _at |
          1  |   37.48228   .5064683    74.01   0.000     36.48936    38.47521
          2  |   36.08209   .4550155    79.30   0.000     35.19004    36.97414
          3  |    34.6819   .4037362    85.90   0.000     33.89038    35.47342
          4  |   33.28171   .3527063    94.36   0.000     32.59023    33.97318
          5  |   31.88152   .3020521   105.55   0.000     31.28935    32.47368
          6  |   21.01066   .4708374    44.62   0.000     20.08759    21.93372
          7  |   21.67869   .3653505    59.34   0.000     20.96242    22.39495
          8  |   22.34672   .2613958    85.49   0.000     21.83425    22.85918
          9  |   23.01474   .1619513   142.11   0.000     22.69724    23.33225
         10  |   23.68277   .0847489   279.45   0.000     23.51662    23.84892
------------------------------------------------------------------------------

. marginsplot

Variables that uniquely identify margins: torque hp
Multiple at() options specified:
      _atoption=1: torque = (25 50 75 100 125)
      _atoption=2: hp = (50 100 150 200 250)

. 
```

![Interaction Plot](/Users/19892/downloads/Graph.png)

As we can see from the graph, as torque goes up and hp goes up, the relationship is not as strong like in problem 2. ( I should have set torque and hp to the same range of values possibly)
